# Generated by Django 5.2 on 2025-06-22 01:46

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('Events', '0003_alter_event_category'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Answers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer_description', models.CharField(max_length=1000)),
                ('answer_created_at', models.DateTimeField(auto_now_add=True)),
                ('answer_fk_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Answer_To_Answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ans_to_ans_description', models.CharField(max_length=1000)),
                ('ans_to_ans_created_at', models.DateTimeField(auto_now_add=True)),
                ('ans_to_ans_fk_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('ans_to_ans_fk_answer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='FAQ.answers')),
            ],
        ),
        migrations.CreateModel(
            name='Complaints',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('complaint_status', models.CharField(max_length=100)),
                ('complaint_reason', models.CharField(max_length=500)),
                ('complaint_created_at', models.DateTimeField(auto_now_add=True)),
                ('complaint_fk_event', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='Events.event')),
                ('complaint_fk_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Questions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_description', models.CharField(max_length=1000)),
                ('question_likes', models.IntegerField(default=0)),
                ('question_dislikes', models.IntegerField(default=0)),
                ('question_created_at', models.DateTimeField(auto_now_add=True)),
                ('question_fk_events', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='Events.event')),
                ('question_fk_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='answers',
            name='answer_fk_question',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='FAQ.questions'),
        ),
        migrations.CreateModel(
            name='QuestionVote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vote_type', models.CharField(choices=[('like', 'Like'), ('dislike', 'Dislike')], max_length=10)),
                ('voted_at', models.DateTimeField(auto_now=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='FAQ.questions')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'question')},
            },
        ),
    ]
